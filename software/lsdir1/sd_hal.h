#ifndef SD_HAL_H_
#define SD_HAL_H_
#include <stdbool.h>
#include <system.h>

#define SD_4BIT_MODE


#define SD_CMD_IN   IOWR_ALTERA_AVALON_PIO_DIRECTION(SD_CMD_BASE, ALTERA_AVALON_PIO_DIRECTION_INPUT)
#define SD_CMD_OUT  IOWR_ALTERA_AVALON_PIO_DIRECTION(SD_CMD_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT)
#define SD_DAT_IN   IOWR_ALTERA_AVALON_PIO_DIRECTION(SD_DAT_BASE, ALTERA_AVALON_PIO_DIRECTION_INPUT)
#define SD_DAT_OUT  IOWR_ALTERA_AVALON_PIO_DIRECTION(SD_DAT_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT)
#define SD_CMD_LOW  IOWR_ALTERA_AVALON_PIO_DATA(SD_CMD_BASE, 0)
#define SD_CMD_HIGH IOWR_ALTERA_AVALON_PIO_DATA(SD_CMD_BASE, 1)
#define SD_CLK_LOW  IOWR_ALTERA_AVALON_PIO_DATA(SD_CLK_BASE, 0)
#define SD_CLK_HIGH IOWR_ALTERA_AVALON_PIO_DATA(SD_CLK_BASE, 1)
#define SD_DAT_LOW  IOWR_ALTERA_AVALON_PIO_DATA(SD_DAT_BASE, 0)
#define SD_DAT_HIGH IOWR_ALTERA_AVALON_PIO_DATA(SD_DAT_BASE, 1)
#define SD_DAT_WRITE(data4) IOWR_ALTERA_AVALON_PIO_DATA(SD_DAT_BASE, data4)
#define SD_TEST_CMD  IORD_ALTERA_AVALON_PIO_DATA(SD_CMD_BASE)
#define SD_TEST_DAT  IORD_ALTERA_AVALON_PIO_DATA(SD_DAT_BASE)

alt_u16 crc16(const alt_u8 *buffer, int len);
void SDHAL_Init();
bool SDHAL_IsSupport4Bits(void);
void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen);
bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen);
bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen);
bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen);
void SDHAL_DummyClock(int nClockCnt);

#endif


